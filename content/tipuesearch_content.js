var tipuesearch = {"pages": [{'title': 'weeks', 'text': 'week1-5 \n week6-9 \n week10-14 \n week15-18 \n', 'tags': '', 'url': 'weeks.html'}, {'title': 'week1-5', 'text': 'week1 \n 使用github 建立網站\xa0 https://pages.github.com/ \n \n 藉由編輯、推送、提交，可將網頁編輯內容儲存至遠端 \n 根據使用的終端不同而有兩種推送方式 \n 終端 \n 選擇你要放置倉儲的資料夾並將倉儲克隆至資料夾內 \n \n 輸入項目 \n \n 提交 \n \n 免費H5模板資源網站 \n 1.HTML5 UP \n 2.Start Bootstrap \n 3.Template.co \n 4.Free HTML5 \n 5.Colorlib \n \n week2 \n 建立倉儲之步驟 \n 1.登錄github帳號，同時創建一個新的倉儲cad2019 \n \n 2.進入cad2019的github頁面並同時將cad2019之分支改為master分支 \n 3.將新的倉儲git clone 至隨身碟裡 \n \n 4.用黑窗進入隨身碟裡的倉儲並且將這串指令輸入 \n git submodule add https://github.com/mdescourse/cmsimde.git\xa0cmsimde \n 這串指令可將遠端網站架構克隆至隨身碟裡 \n \n 5.因在舊版的可攜系統中無此模組, 執行 CMSiMDE 之前必須透過 \n python -m pip install flask_cors \n 安裝，以利近端開啟 \n \n 6.在URL列輸入https://localhsot:9443即可開啟近端 \n \n \n week3 \n solve編譯 \n 1.先將目錄切換至tmp \n cd tmp \n 2.進入solvespace \n cd\xa0espace \n 3.進入extlib \n cd\xa0extlib \n 4.進入 libpng \n cd libpng \n 5.製造build \n mkdir build \n 6.將路徑切換至build \n cd build \n 7.輸入 \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n 8.再輸入 \n mingw32-make \n 9.從這裡要將路徑切換至solvespace 原始碼 \n cd ..*3 \n 10. 製造build \n mkdir build \n 11. 將路徑切換至build \n cd build \n 12. 輸入 \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n 13. 再輸入 \n mingw32-make \n \n \n week4 \n slovespace 手冊研讀 http://solvespace.com/index.pl \n \n week5 \n 使用solvespace 繪製圖案 \n 快捷鍵\xa0 \n \n', 'tags': '', 'url': 'week1-5.html'}, {'title': 'week6-9', 'text': 'week6 \n 一.輪胎 \n 1.先使用快捷鍵C畫出直徑30的輪胎 \n 2.將長出輪胎設定厚度為3 \n 3.定義一個平面畫直徑為10的輪軸 \n 4.長出輪軸 \n 5.完成 \n 二.本體 \n 1.使用快捷鍵R畫出100*80*100之矩形 \n 2.定義一個平面並用快捷鍵R畫出90*60*90之矩形 \n 3.使用differece將剛剛完成之矩形除料 \n 4.定義一個平面鑽孔 \n 5.使用快捷鍵Q將這兩個孔定義相等 \n 6.使用difference 選項除料 \n 7.定義除料深度為100 \n 8.完成 \n 三.組合 \n 1.打開剛剛完成之輪胎模型，並定義其軸線平行於軸心 \n 2.使用快捷鍵O將零件兩個點合併 \n 3.同步上面步驟即可得到其他輪子 \n 4.完成 \n \n \n 成品圖 \n \n \n \n v rep 控制 \n \n \n 新增stop start 按鈕 \n \n \n week7 \n 1.進入tmp中的solvespace\\build\\src\\cmakefiles\\solvespace.dir \n 2.刪除solvespace.obj檔 \n 3.使用編譯器將solvespace.cpp開啟 \n 4.使用快捷鍵Ctrl+f搜尋GPL，並在This is solvespacec加入compired by 學號 \n 5.完成後儲存並開啟solvespace about 確認是否更改成功 \n 6.完成 \n \n CAD2-8 \n \n \n \n \n CAD2-18 \n \n \n \n \n \n week8 \n 將webots導入start.bat和stop .bat中 \n \n \n week9 \n \n \n', 'tags': '', 'url': 'week6-9.html'}, {'title': 'week10-14', 'text': 'week10 \n week11 \n week12 \n week13 \n week14', 'tags': '', 'url': 'week10-14.html'}, {'title': 'week10', 'text': 'virtual box 開啟NX12 \n \n 虛擬化的優缺點 \n 為了滿足企業需求的思維，大老闆們希望在不增加企業支出的前提下，針對企業原有的架構來規劃，整併、汰換與升級企業的 IT 環境，改善系統及管理的效率，讓  IT  資源得以滿足組織目標，提高資源的使用率與靈活性；而為了達成 IT  資源最佳化，虛擬化是不可缺少的技術之一。虛擬化有幾個明顯的優點：節省電能與空間，更可以有效地整合分散的資源、減少軟硬體之間的束縛，以利管理及提高可用性，並大幅提升效能及運作效率。因虛擬化大量應用在企業中，因此下面我們列出虛擬化帶給企業的四大優點： \n \n 降低成本 \n \n \u3000虛擬化的分區可以讓一台伺服器如同多台伺服器般運作，使用者在採購初期因而可以省下添購新伺服器或儲存設備的費用。虛擬化也可以減少不同版本的作業系統的管理需求，還能同時有效地精簡系統維護跟伺服器作業的成本。 \n \n 提升效率 \n \n \u3000系統的作業不用等待就可以立即且彈性地分配資源來應付大量的作業需求。這功能可以在有需要時迅速增加應用程式，快速回應市場或業務的需求，因而提高效能。主控台還可以控制所有實體機器與虛擬機器的運作，可以看到每台機器使用的實體資源有多少，這使企業可以更方面地管理。 \n \n 簡化管理 \n \n \u3000虛擬化可以減少伺服器的數量，降低管理人員的負擔。企業利用虛擬技術把個別用途的伺服器整合入大型的伺服器，因而簡化架構管理流程，增加管理效率。 \n \n 綠色效益 \n \n 虛擬化減少了伺服器的數量，提高了伺服器的使用率，讓能源做了更有效的\u3000運能。虛擬化是綠色創新工程中重要的技術之一，它可以幫企業節省多達四成的動能和冷卻消耗支出。不過虛擬化不是沒有缺點的，在企業中會出現資訊安全、資訊管理、 SLA 、效能管理等方面的問題。而且對於問題的偵測與排除，虛擬環境會比實體系統複雜，管理者需要工具來協助。因此虛擬化的優缺點是否會相互抵銷？這便是使用虛擬化所需要認真思考的問題了。 \n 目前主流虛擬器軟體 \n windows virtual pc \n \n \n 官網載點 \n 官網 \n \n virtualbox \n \n \n 官網載點 \n 官網 \n \n vmware workstation \n \n \n 官網載點 \n 官網 \n \n 資料來源: https://www.csie.ntu.edu.tw › Course › CSIT › CSIT_Virtualization \n', 'tags': '', 'url': 'week10.html'}, {'title': 'week11', 'text': '', 'tags': '', 'url': 'week11.html'}, {'title': 'week12', 'text': '\n NX\xa0 Unit 8 translation\xa0 \n 第八章有限元素分析 \n 有限元素分析 (FEA) 是一種實用的有限元素法 (FEM) ，它可以預測結構及流體中的壓力、熱量、震動和力量的反應行為，通常該行為從創作模型開始，接著將模型細分為相同的網狀幾何形狀且連結在特定節點上，其材料特性及邊界狀況適用於任意原件上。 \n 最後，如 NX12 軟體解決了 FEA 、輸出及可視化，這些東西幫助工程師在成品製作及測試過程前更進一步了解產品性能。 \n FEA的應用包含了結構分析、熱分析、流體力學、和電磁兼容性，此外 FEA 也常被用來計算結構及固體力學的機械性能 ( 應力和位移 ) ，這些行為可用於預測機械硬體的損壞，在本章節我們將探討實體零件的結構應力和應變分析。 \n 總覽 \n 8-1元件形狀和節點 \n 可將元件中的維數及節點點數將元件分成不同類型，以下適用於離散化的某些函數類型。 \n \xa0 \n 一維單元 \n \xa0 \n \xa0 \n \xa0 \n 二維單元 \n 三角形 \n \xa0 \n \xa0 \n 四邊形 \n \xa0 \n 三維單元 \n 四面體（具有四個三角形面的實體） \n \xa0 \n \xa0 \n \xa0 \n 六面體（具有 6 個四邊形面的實體） \n \xa0 \n 節點類型 \n \xa08-1-2解決步驟通常當有限元素質較小時 FEA 能有更精確的答案，但運算時間也會變得更長。 \n 開始模擬 : 你可以在下列運算器中找到解決方法如NX Nastran, NX Nastran Acoustic, NX Nastran Vibro-Acoustic, NX Nastran Design, Samcef, NX Thermal/Flow, Simcenter Electronic Systems Cooling, Simcenter Space Systems Thermal, NX Multiphysics, Simcenter Acoustics BEM, MSC Nastran, Ansys, Abaqus, 和LS-DYNA，除此之外你可以選擇你要分析的形式，在這在本教程中只有結構分析將會被NX Nastran Design取代顯示 \n \xa0選擇材料特性:這允許你改變材料特性並將其分配給模型，如果我們使用鋼材製作葉倫，我們可以使用如密度、帕鬆比等材料特性，這些材料特性利於實驗室保存供未來使用，或是可以從材料庫中檢索。 \n \xa0施加應力:此舉可讓你施加不同類型的負載，如力量和壓力沿著固體作用方向和大小。 \n \xa0應用邊界條件:簡單來說，邊界條件限制了元件在空間中的自由度，某些元件可以限制其旋轉運動爾，而某些可以限制其元件進行平移運動。 \n \n NX12 unit8 \n 葉輪(impeller)葉片 \n 1.將檔案名稱設定為Impeller_impeller.prt \n 2.將單位更改至英制單位 \n 3.設定草圖平面，並繪製兩點(0,0,0)及(11.75,6,0) \n 4.繪製兩個半徑分別為1.5及0.5之圓弧在剛剛定義之兩點上 \n 5.繪製相交圓弧將這兩個圓弧相連，而這兩個圓弧之吋為15及18 \n 6.由路徑more/geimetic constrain/tangent定義曲線相交 \n \n 錐形軸 \n 1.建立新的模型將其檔名命名為 Impeller_shaft.prt，並將其單位制度改成英制 \n 2.選定基準面畫出 Ø4的圓，完成後按finsh鍵並長出高度18的圓柱 \n 3.依照路徑insert-desigh fecture -corn 完成Ø4*6*10之圓錐 \n 4.依照第一步驟完成Ø6*20之圓柱 \n 5.完成零件 \n \n', 'tags': '', 'url': 'week12.html'}, {'title': 'week13', 'text': 'Webots 用戶指南 \n 課程一 . 創建一個新的虛擬環境 \n 本章節是讓你熟悉webot介面及操作，你將會創造一個虛擬空間包含了地板、牆壁，\xa0e-puck 機器人(\xa0e-puck robot\xa0)及\xa0e-puck robot\xa0控制系統。 \n 如果你尚未安裝webot ，請參考 這裡 \n 執行webot \n 第一步驟:透過點擊webots圖示或使用終端命令來執行webots。 \n 第二步驟:點擊 來停止場景模擬，並依照路徑wizards/New Project Directory...創建新的虛擬環境，將儲存路徑及檔案名稱更改為 my_first_simulation 而不是建議名稱 my_project 。 \n 第三步驟:展開RectangleArena將其中的floorTiliesizet及wallHight尺寸依序改為(0.25，0.25)、(0.05)。 \n 第四步驟:點擊add選擇 PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid)來新增木箱 \n 1.將 size尺寸更改成 0.1 0.1 0.1 \n 2.將translation尺寸更改為 0 0.05 0 \n 3.點擊shift將木箱拖曳至角落 \n 4.使用contral+V複製木箱並按照3將木箱拖曳至你想要的位置 \n 新增e-puck robot \n 第五步驟:依照路徑Wizards / New Robot Controller...新增控制器，並將其檔案命名為e-puck_go_forward1u \n 第六步驟:將原始碼貼上 \n', 'tags': '', 'url': 'week13.html'}, {'title': 'week14', 'text': '', 'tags': '', 'url': 'week14.html'}, {'title': 'week15-18', 'text': 'week15 \n week16 \n week17 \n week18 \n \n', 'tags': '', 'url': 'week15-18.html'}, {'title': 'note', 'text': '無法提交近端網頁所編輯之內容 \n solvespace 無法長出實體零件 \n IPV4與IPV6之間差異 \n python if 語法 \n HTML ifram 用法 \n', 'tags': '', 'url': 'note.html'}, {'title': 'solvespace 無法長出實體零件', 'text': '\n solvespace 無法長出實體零件 \n \n 解決辦法 \n 使用指令G將圖框中不需要之實線轉變成輔助線 \n 圖中綠色之線為實線轉輔助線之結果 \n \n', 'tags': '', 'url': 'solvespace 無法長出實體零件.html'}, {'title': '無法提交近端網頁所編輯之內容', 'text': '\n 這張圖片大致上說目前線上版本比你現有的版本還新因此無法推送。 \n 生成原因 \n 通常好發於多人開發的環境 \n \n \n Sherly 跟 Eddie 兩個人在差不多的時間都從 Git Server 上拉了一份資料下來準備進行開發。 \n Sherly 手腳比較快，先完成了，於是先把做好的成果推一份上去。 \n Eddie 不久後也完成了，但當他要推上去的時候發現推不上去了… \n \n 解決方法 \n 1.先拉在推 \n 因為你電腦裡的內容是比較舊的，所以先拉一份線上版本的回來更新，然後再推一次 \n \n 因此只要下git pull 指令即可成功提交 \n 2.強制提交 \n 在上面的例子中，Sherly 先推上去的內容，後推的人就是應該拉一份下來更新，不然照規定是推不上去的。不過這規則也是有例外，只要加上了git\xa0 --force \xa0 或是git \xa0 -f \xa0 參數，它就會強迫硬推上去把 Sherly 之前的內容蓋掉 \n \n 參考資料 \n https://gitbook.tw/chapters/github/fail-to-push.html \n', 'tags': '', 'url': '無法提交近端網頁所編輯之內容.html'}, {'title': 'IPV4與IPV6之間差異', 'text': '何謂IP? \n 網路通訊協定（Internet Protocol，IP）是用於網路交換封包的一種協定，它定義了定址方式及資料的封裝結構。 \n 位址的數量 \n IPV4之位置數量為2的32次方個 \n IPV6之位置數量為2的128次方個 \n \n 位址表示方式 \n IPv4的IP位址是由32位元所組成，原始的表示方式是8個位元為一個單位，分4個部分。每個部分以2進位表示，並以「.」做區隔，譬如：「10110110.11101001.01001100.11111111」。 \n 不過這樣的表示法太長，不便記憶。所以通常都以10進位的方法表示，而每個部份的數字會呈現0至255的整數。 \n 而IPv6的IP位址則是128位元組成，表示方式是使用8組數字，每組為4個字元的16進位方法表示。而區隔每個部分的方式亦與IPv4不同，是以「:」表示。譬如「1079:0BD3:6ED4:1D71:414B:2E2A:7144:72BE」，這樣就是一組標準的IPv6網路位址。 \n 不過IPv6的位址表示法太長，所以位址有所謂的省略規則，以下為2個位址省略規則： \n 規則1：為每組數字的第一個0可以省略，若整組皆為0，則以0表示。譬如，「0DB8」可以省略為「DB8」，「0000」則為「0」。 \n 規則2：為連續出現的0000可以省略成「::」。譬如：「:0000:0000:0000:0000:」可以省略成「:0000:0000:0000::」、「:0:0:0:0:」、「:0::0:」或「::」。 \n 但需注意的是，由於「::」表示為連續且數量多的0，所以如果位址中出現2個「::」時，會讓人搞不清楚實際代表的位址。因為這樣，在位址省略規則中有明訂，對於一個IPv6位址，只能出現一次「::」來省略0。 \n 由於IPv6的位址經過省略後，依舊不方便一般人記憶。所以在網頁存取位址，或撰寫應用程式呼叫網址時，建議不要直接使用IPv6位址，應該使用DNS網域名稱會較為方便。 \n 除了表示方式不同外，兩者間的位址型態也有些許差異。像IPv6提供Unicast、Anycast及Multicast，三種位址型態。其中Unicast對應單點傳送、Multicast則取代廣播，只有這兩點與IPv4類似。而Anycast則是發送給群組，但只有最近的介面會接收到。 \n 表頭格式與功能 \n IPv6的表頭格式是改良自IPv4，它有大幅度的修改，讓表頭格式更為簡化及具有擴充性。IPv6與IPv4共同的欄位有Version、Source Address、Destination Address，還有部分欄位功能類似，名稱卻不同。譬如Payload Length取代了Datagram Length、Next Header取代Protocol，以及Hop Limit取代TTL。 \n 而IPv6亦增加了Flow Label及Priority等兩個欄位，它們的功能是用來支援像視訊、語音這類即時服務的需求，以提高QoS的品質。 \n 就Flow Label欄位來說，IPv6的封包能夠在該欄位留下標記。在傳輸時，一連串的封包會要求所經過的路由器，提供特別的處理。而路由器則會透過該欄位，辨識封包的Flow Level；而Priority則可以設定封包傳輸的優先順序，透過這欄位的檢查，讓較重要的封包優先傳送。 \n 除此之外，IPv6在安全、擴充等功能上，加強了IPv4缺乏的部份。像安全性方面，IPv6預設有IPSec，來提升安全性。相較之下，IPv4的IPSec則需要額外開啟。而擴充方面，IPv4只能使用Option欄位，而IPv6除了將基本表頭簡化外，還可以任意加上多個擴充表頭使用。 \n 參考資料 https://www.ithome.com.tw/tech/92046 \n https://www.ibm.com/support/knowledgecenter/zh-tw/ssw_ibm_i_71/rzai2/rzai2compipv4ipv6.htm#rzai2compipv4ipv6__compportrestrict \n', 'tags': '', 'url': 'IPV4與IPV6之間差異.html'}, {'title': 'python if 語法', 'text': 'if單一條件式判斷: \n if 條件式:\n   # 語句....\n \n \n if...else單一條件式判斷: \n if 條件式:\n   # 語句...\n# 上述條件不成立執行\nelse:\n   # 語句... \n if ...elif 多重條件判斷: \n if 條件式 1 :\n   # 語句...\nelif 條件式 2 :\n   # 語句... \n if...elif...else 多重條件判斷: \n if 條件式 1 :\n   # 語句...\nelif 條件式 2 :\n   # 語句...\nelif 條件式 3 :\n   # 語句...\n.\n.\n# 上述條件都不成立執行\nelse :\n   #語句... \n \n HTML\u3000iframe用法(reveal插入影片使用) \n HTML iframe 語法 \n <iframe src="嵌入目標" width="寬度" height="高度" frameborder="邊框參數" scrolling="卷軸參數"></iframe> \n HTML 的 iframe 有許多參數可以設定，最重要的就是 src 這個部分，嵌入目標就是要嵌入的網頁，少了這個部分，iframe 就等於沒有存在意義，嵌入的網頁可以是相同網域內的其他頁面，也可以是外部網頁。width 與 height 分別用來設定 iframe 所要占用的寬度與高度。第三個參數 frameborder 可以用來設定 iframe 的邊框是否要顯示，如果寫為 frameborder="0" 代表不顯示邊框，如果寫成 frameborder="1" 則代表要顯示邊框。最後 scrolling 用來控制 iframe 的卷軸是否要顯示，有三種屬性質可以設定，寫成 scrolling="yes" 代表要顯示捲軸、寫成 scrolling="no" 代表不顯示捲軸、寫成 scrolling="auto" 則代表根據網頁大小自動顯示。 HTML iframe 範例 \n <iframe src="嵌入目標" width="250px" height="300px" frameborder="0" scrolling="no"></iframe> \n 此範例的寬度與高度設定都是以 px 為單位，這也是大部分瀏覽器（browser）的預設值，px 有沒有寫通常沒有影響（建議還是寫出來比較不容易出錯），但如果採用百分比做為單位，就一定要寫出來，否則光寫數字會造成瀏覽器的誤判，以為是要以 px 為單位，再來「frameborder="0"」代表不顯示邊框、「scrolling="no"」代表不顯示卷軸，基本上 HTML iframe 的概念就這麼簡單。 \n 資料來源: http://www.webtech.tw/info.php?tid=99', 'tags': '', 'url': 'python if 語法.html'}, {'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.', 'tags': '', 'url': 'Develop.html'}]};
<h1>weekly progress</h1>
<p><a href="https://s40723212.github.io/cad2019/content/week2.html">week2</a></p>
<p><a href="https://s40723212.github.io/cad2019/content/week3.html">week3</a></p>
<p><a href="https://s40723212.github.io/cad2019/content/week4.html">week4</a></p>
<p><a href="https://s40723212.github.io/cad2019/content/week5.html">week5</a></p>
<p><a href="https://s40723212.github.io/cad2019/content/week6.html">week6</a></p>
<p><a href="https://s40723212.github.io/cad2019/content/week7.html">week7</a></p>
<p><a href="https://s40723212.github.io/cad2019/content/week8.html">week8</a></p>
<p><a href="https://s40723212.github.io/cad2019/content/week9.html">week9</a></p>
<p><a href="https://s40723212.github.io/cad2019/content/week10.html">week10</a></p>
<h2>week1</h2>
<p>使用github 建立網站 <a href="https://pages.github.com/">https://pages.github.com/</a></p>
<h2>week2</h2>
<p><a href="https://s40723212.github.io/cad2019/content/IPV4%E8%88%87IPV6%E4%B9%8B%E9%96%93%E5%B7%AE%E7%95%B0.html">IPV4與IPV6之間之差異</a></p>
<p>建立倉儲之步驟</p>
<p>1.登錄github帳號，同時創建一個新的倉儲cad2019</p>
<p></p>
<p>2.進入cad2019的github頁面並同時將cad2019之分支改為master分支</p>
<p>3.將新的倉儲git clone 至隨身碟裡</p>
<p></p>
<p>4.用黑窗進入隨身碟裡的倉儲並且將這串指令輸入</p>
<p><span style="color: #ff0000;">git submodule add https://github.com/mdescourse/cmsimde.git cmsimde</span></p>
<p>這串指令可將遠端網站架構克隆至隨身碟裡</p>
<p></p>
<p>5.因在舊版的可攜系統中無此模組, 執行 CMSiMDE 之前必須透過</p>
<p><span style="color: #ff0000;">python -m pip install flask_cors</span></p>
<p>安裝，以利近端開啟</p>
<p></p>
<p>6.在URL列輸入https://localhsot:9443即可開啟近端</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/CpkhXfev2Wk" width="560"></iframe></p>
<h3>IPV4與IPV6之間差異</h3>
<p>何謂IP?</p>
<p><span>網路通訊協定（Internet Protocol，IP）是用於網路交換封包的一種協定，它定義了定址方式及資料的封裝結構。</span></p>
<p><strong>位址的數量</strong></p>
<p>IPV4之位置數量為2的32次方個</p>
<p>IPV6之位置數量為2的128次方個</p>
<p></p>
<p><strong>位址表示方式</strong></p>
<p>IPv4的IP位址是由32位元所組成，原始的表示方式是8個位元為一個單位，分4個部分。每個部分以2進位表示，並以「.」做區隔，譬如：「10110110.11101001.01001100.11111111」。</p>
<p>不過這樣的表示法太長，不便記憶。所以通常都以10進位的方法表示，而每個部份的數字會呈現0至255的整數。</p>
<p>而IPv6的IP位址則是128位元組成，表示方式是使用8組數字，每組為4個字元的16進位方法表示。而區隔每個部分的方式亦與IPv4不同，是以「:」表示。譬如「1079:0BD3:6ED4:1D71:414B:2E2A:7144:72BE」，這樣就是一組標準的IPv6網路位址。</p>
<p>不過IPv6的位址表示法太長，所以位址有所謂的省略規則，以下為2個位址省略規則：</p>
<p>規則1：為每組數字的第一個0可以省略，若整組皆為0，則以0表示。譬如，「0DB8」可以省略為「DB8」，「0000」則為「0」。</p>
<p>規則2：為連續出現的0000可以省略成「::」。譬如：「:0000:0000:0000:0000:」可以省略成「:0000:0000:0000::」、「:0:0:0:0:」、「:0::0:」或「::」。</p>
<p>但需注意的是，由於「::」表示為連續且數量多的0，所以如果位址中出現2個「::」時，會讓人搞不清楚實際代表的位址。因為這樣，在位址省略規則中有明訂，對於一個IPv6位址，只能出現一次「::」來省略0。</p>
<p>由於IPv6的位址經過省略後，依舊不方便一般人記憶。所以在網頁存取位址，或撰寫應用程式呼叫網址時，建議不要直接使用IPv6位址，應該使用DNS網域名稱會較為方便。</p>
<p>除了表示方式不同外，兩者間的位址型態也有些許差異。像IPv6提供Unicast、Anycast及Multicast，三種位址型態。其中Unicast對應單點傳送、Multicast則取代廣播，只有這兩點與IPv4類似。而Anycast則是發送給群組，但只有最近的介面會接收到。</p>
<p><strong>表頭格式與功能</strong></p>
<p>IPv6的表頭格式是改良自IPv4，它有大幅度的修改，讓表頭格式更為簡化及具有擴充性。IPv6與IPv4共同的欄位有Version、Source Address、Destination Address，還有部分欄位功能類似，名稱卻不同。譬如Payload Length取代了Datagram Length、Next Header取代Protocol，以及Hop Limit取代TTL。</p>
<p>而IPv6亦增加了Flow Label及Priority等兩個欄位，它們的功能是用來支援像視訊、語音這類即時服務的需求，以提高QoS的品質。</p>
<p>就Flow Label欄位來說，IPv6的封包能夠在該欄位留下標記。在傳輸時，一連串的封包會要求所經過的路由器，提供特別的處理。而路由器則會透過該欄位，辨識封包的Flow Level；而Priority則可以設定封包傳輸的優先順序，透過這欄位的檢查，讓較重要的封包優先傳送。</p>
<p>除此之外，IPv6在安全、擴充等功能上，加強了IPv4缺乏的部份。像安全性方面，IPv6預設有IPSec，來提升安全性。相較之下，IPv4的IPSec則需要額外開啟。而擴充方面，IPv4只能使用Option欄位，而IPv6除了將基本表頭簡化外，還可以任意加上多個擴充表頭使用。</p>
<p><span></span>參考資料<a href="https://www.ithome.com.tw/tech/92046">https://www.ithome.com.tw/tech/92046</a></p>
<p><a href="https://www.ibm.com/support/knowledgecenter/zh-tw/ssw_ibm_i_71/rzai2/rzai2compipv4ipv6.htm#rzai2compipv4ipv6__compportrestrict">https://www.ibm.com/support/knowledgecenter/zh-tw/ssw_ibm_i_71/rzai2/rzai2compipv4ipv6.htm#rzai2compipv4ipv6__compportrestrict</a></p>
<h2>week3</h2>
<p>solve編譯</p>
<p>1.先將目錄切換至tmp</p>
<p><span style="color: #ff0000;">cd tmp</span></p>
<p>2.進入solvespace</p>
<p><span style="color: #ff0000;">cd espace</span></p>
<p><span>3.進入extlib</span></p>
<p><span style="color: #ff0000;">cd extlib</span></p>
<p><span style="color: #000000;">4.進入 libpng</span></p>
<p><span style="color: #ff0000;">cd libpng</span></p>
<p><span style="color: #000000;">5.製造build</span></p>
<p><span style="color: #ff0000;">mkdir build</span></p>
<p><span style="color: #000000;">6.將路徑切換至build</span></p>
<p><span style="color: #ff0000;">cd build</span></p>
<p><span style="color: #000000;">7.輸入</span></p>
<p><span style="color: #ff0000;">cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</span></p>
<p><span style="color: #000000;">8.再輸入</span></p>
<p><span style="color: #ff0000;">mingw32-make</span></p>
<p>9.從這裡要將路徑切換至solvespace 原始碼</p>
<p><span style="color: #ff0000;">cd ..*3</span></p>
<p>10.<span style="color: #000000;">製造build</span></p>
<p><span style="color: #ff0000;">mkdir build</span></p>
<p>11.<span style="color: #000000;">將路徑切換至build</span></p>
<p><span style="color: #ff0000;">cd build</span></p>
<p>12.<span style="color: #000000;">輸入</span></p>
<p><span style="color: #ff0000;">cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</span></p>
<p>13.<span style="color: #000000;">再輸入</span></p>
<p><span style="color: #ff0000;">mingw32-make</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ii49mGL2yco" width="560"></iframe></p>
<h2>week4</h2>
<p>slovespace 手冊研讀<a href="http://solvespace.com/index.pl">http://solvespace.com/index.pl</a></p>
<h2>week5</h2>
<h2>week6</h2>
<h2>week7</h2>
<h2>week8</h2>
<h2>week9</h2>
<h2>week10</h2>
<p><span face="Helvetica" style="font-family: Helvetica;"><span size="16"></span></span></p>
<h1>Website Design platform</h1>
<ol>
<li><span>ApproveMe</span></li>
<li><span>Zedity</span></li>
<li><span>Xfive</span></li>
<li><span>UptimeRobot</span></li>
<li><span>Themify</span></li>
<li><span>WPForms</span></li>
<li><span>Codester</span></li>
<li><span>MonsterInsights</span></li>
<li><span>OptinMonster</span></li>
<li><span>Colorlib Newspaper X</span></li>
<li><span>Logo123</span></li>
<li><span>Meridian Themes</span></li>
<li><span>Super Website Builders<br/></span></li>
<li><span>RumbleTalk</span></li>
<li><span>SiteGround</span></li>
<li><span>WP Engine</span></li>
<li><span>40 Dollar Logo</span></li>
<li><span>InvoiceBerry</span></li>
<li><span>EvergreenFeed</span></li>
<li><span>Host Tracker</span></li>
<li><span>SnapPages</span></li>
</ol>
<h1>Q&amp;A</h1>
<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>